(()=>{"use strict";var t={};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var o=t.g.document;if(!e&&o&&(o.currentScript&&(e=o.currentScript.src),!e)){var i=o.getElementsByTagName("script");i.length&&(e=i[i.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e+"../"})(),(()=>{class t{constructor(){this.apiUrl="https://api.covid19api.com/",this.proxyUrl="https://cors-anywhere.herokuapp.com/"}getCountries(){return this.getData(`${this.apiUrl}countries`)}getSummary(){return this.getData(`${this.apiUrl}summary`,{headers:{"X-Access-Token":"5cf9dfd5-3449-485e-b5ae-70a60e997864"}})}getDayOne(t,e){const o=`${this.apiUrl}dayone/country/${t}/status/${e}`;return this.getData(o)}getDayOneAllStatus(t){const e=`${this.apiUrl}dayone/country/${t}`;return this.getData(e)}getDayOneLive(t,e){const o=`${this.apiUrl}dayone/country/${t}/status/${e}/live`;return this.getData(o)}getDayOneTotal(t,e){const o=`${this.apiUrl}total/dayone/country/${t}/status/${e}`;return this.getData(o)}getDayOneTotalAllStatus(t){const e=`${this.apiUrl}total/dayone/country/${t}`;return this.getData(e)}getByCountry(t,e,o,i){const r=`${this.apiUrl}country/${t}/status/${e}?from=${o.toISOString()}&to=${i.toISOString()}`;return this.getData(r)}getByCountryAllStatus(t,e,o){const i=`${this.apiUrl}country/${t}?from=${e.toISOString()}&to=${o.toISOString()}`;return this.getData(i)}getByCountryLive(t,e,o,i){const r=`${this.apiUrl}country/${t}/status/${e}/live?from=${o.toISOString()}&to=${i.toISOString()}`;return this.getData(r)}getByCountryTotal(t,e,o,i){const r=`${this.apiUrl}total/country/${t}/status/${e}?from=${o.toISOString()}&to=${i.toISOString()}`;return this.getData(r)}getByCountryTotalAllStatus(t){const e=`${this.apiUrl}total/country/${t}`;return this.getData(e)}getLiveByCountryAndStatus(t,e){const o=`${this.apiUrl}live/country/${t}/status/${e}`;return this.getData(o)}getLiveByCountryAllStatus(t){const e=`${this.apiUrl}live/country/${t}`;return this.getData(e)}getLiveByCountryAndStatusAfterDate(t,e,o){const i=`${this.apiUrl}live/country/${t}/status/${e}/date/${o.toISOString()}`;return this.getData(i)}getWorldWIP(t,e){const o=`${this.apiUrl}world?from=${t.toISOString()}&to=${e.toISOString()}`;return this.getData(o)}getWorldTotalWIP(){const t=`${this.apiUrl}https://api.covid19api.com/world/total`;return this.getData(t)}getCountriesCoords(){return this.getData("https://gist.githubusercontent.com/erdem/8c7d26765831d0f9a8c62f02782ae00d/raw/248037cd701af0a4957cce340dabb0fd04e38f4c/countries.json")}getGeoJSON(){return this.getData("https://archylex.github.io/js-homework/custom.geo.json")}async getData(t,e){return this.eslint=null,await fetch(t,e).then((t=>t.json()))}}(new class{constructor(){this.info=new t,this.maxAmount=1,this.countriesCoords={},this.circles=[],this.getCountriesCoords(),this.list=document.querySelector(".map__dropdown-content"),this.list.addEventListener("click",this.startById.bind(this)),this.mapHTML=document.createElement("div"),this.mapHTML.id="map",this.map=new L.map("map",{center:[43.0590235,141.3459553],zoom:5,maxZoom:5,minZoom:2,zoomControl:!0,attributionControl:!1}),L.tileLayer("https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw",{maxZoom:18,id:"mapbox/dark-v9",tileSize:512,zoomOffset:-1}).addTo(this.map),this.geoJSON(),this.legend=L.control({position:"bottomleft",clear:"none"}),this.legendHTML=L.DomUtil.create("div","info legend"),this.legend.onAdd=this.createLegendHTML.bind(this),this.displayInfo=L.control({position:"topleft",clear:"none"}),this.displayInfo.onAdd=this.showInfo,this.displayInfo.update=this.updateInfo,this.displayInfo.addTo(this.map),this.legend.addTo(this.map)}showInfo(){return this._div=L.DomUtil.create("div","info"),this.update(),this._div}updateInfo(t){this._div.innerHTML=t?`\n            <h2>${t.formal_en}</h2>\n            <h3>${t.covid_title}</h3>\n            <b>${t.covid} cases<br />`:"COVID-19"}createLegendHTML(){const t=.2*this.maxAmount,e=Array(6).fill(t).map(((t,e)=>t*e));this.legendHTML.innerHTML="";for(let t=0;t<e.length;t++)this.legendHTML.innerHTML+=`<i style="background:${this.getColorByCount(e[t])}"></i>${e[t]}<br>`;return this.legendHTML}startById(t){switch(document.querySelector(".map__dropdown-button").textContent=t.target.textContent,t.target.id){case"list_total_confirmed":this.drawTotalConfirmed();break;case"list_total_death":this.drawTotalDeaths();break;case"list_total_recovered":this.drawTotalRecovered();break;case"list_new_confirmed":this.drawNewConfirmed();break;case"list_new_deaths":this.drawNewDeaths();break;case"list_new_recovered":this.drawNewRecovered()}}drawCircle(t){const e=[t.latitude,t.longitude],o={color:"#00000077",fillColor:this.getColorByCount(t.amount),fillOpacity:1},i=t.amount/this.maxAmount,r=L.circle(e,1e5*i+1e4,o);r.addTo(this.map),this.circles.push(r)}clearCircles(){this.circles.forEach((t=>{void 0!==t&&this.map.removeLayer(t)}))}async geoJSON(){this.geodata=await this.info.getGeoJSON(),this.geodata.features.forEach((t=>{t.properties.covid=0,t.properties.covid_title=""})),this.geojson=new L.geoJson(this.geodata,{style:this.style.bind(this),onEachFeature:this.onEachFeature.bind(this)}),this.geojson.addTo(this.map)}async getCountriesCoords(){const t=await this.info.getCountriesCoords();for(let e=0;e<t.length;e++)this.countriesCoords[t[e].country_code]=t[e]}getColorByCount(t){return`hsla(${t/this.maxAmount*180+180}, 255%, 50%, 1)`}style(t){return{fillColor:this.getColorByCount(t.properties.covid),weight:1,opacity:0,color:"#ffffff",fillOpacity:0}}highlight(t){const e=t.target;e.setStyle({weight:3,color:"#ffffff",opacity:.3,fillOpacity:.3}),L.Browser.ie||L.Browser.opera||L.Browser.edge||e.bringToFront(),this.displayInfo.update(e.feature.properties)}reset(t){this.geojson.resetStyle(t.target),this.displayInfo.update()}zoomToCountry(t){this.map.fitBounds(t.target.getBounds())}onEachFeature(t,e){e.on({mouseover:this.highlight.bind(this),mouseout:this.reset.bind(this),click:this.zoomToCountry.bind(this)})}async drawTotal(t){const e=(await this.info.getSummary()).Countries,o={TotalConfirmed:"Total Confirmed",TotalDeaths:"Total Deaths",TotalRecovered:"Total Recovered",NewConfirmed:"New Confirmed",NewDeaths:"New Deaths",NewRecovered:"New Recovered"},i=[];for(let r=0;r<e.length;r++){const s={amount:e[r][t],country:e[r].Country,latitude:this.countriesCoords[e[r].CountryCode].latlng[0],longitude:this.countriesCoords[e[r].CountryCode].latlng[1]};i.push(s);const a=e[r][t];this.maxAmount=this.maxAmount<a?a:this.maxAmount,this.geodata.features.forEach((i=>{i.properties.iso_a2===e[r].CountryCode&&(i.properties.covid=e[r][t],i.properties.covid_title=o[t])}))}for(let t=0;t<i.length;t++)this.drawCircle(i[t]);this.createLegendHTML()}drawTotalConfirmed(){this.clearCircles(),this.drawTotal("TotalConfirmed")}drawTotalDeaths(){this.clearCircles(),this.drawTotal("TotalDeaths")}drawTotalRecovered(){this.clearCircles(),this.drawTotal("TotalRecovered")}drawNewConfirmed(){this.clearCircles(),this.drawTotal("NewConfirmed")}drawNewDeaths(){this.clearCircles(),this.drawTotal("NewDeaths")}drawNewRecovered(){this.clearCircles(),this.drawTotal("NewRecovered")}}).drawTotalConfirmed()})(),t.p})();